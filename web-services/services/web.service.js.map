{"version":3,"sources":["../../services/web.service.ts"],"names":[],"mappings":"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","file":"web.service.js","sourceRoot":"","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Http, Headers, RequestOptionsArgs, Response, RequestMethod, ResponseContentType} from '@angular/http';\r\n\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {ErrorObservable} from 'rxjs/observable/ErrorObservable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/throw';\r\n\r\nexport type Json = {} | any;\r\n\r\n\r\nexport class WebService {\r\n  private ReadHeaders: Headers;\r\n  private WriteHeaders: Headers;\r\n\r\n  private requestOptions: RequestOptionsArgs = {withCredentials: true};\r\n\r\n  public static blobResponseHandler(response: Response): Blob {\r\n    return response.blob() || new Blob();\r\n  }\r\n\r\n  public static arrayBufferResponseHandler(response: Response): ArrayBuffer {\r\n    return response.arrayBuffer() || new ArrayBuffer(0);\r\n  }\r\n\r\n  public static httpResponseHandler(response: Response): string {\r\n    return response.text() || '';\r\n  }\r\n\r\n  public static jsonResponseHandler(response: Response): Json {\r\n    return response.json() || {};\r\n  }\r\n\r\n  public static errorResponseHandler(response: Response): ErrorObservable {\r\n    if (!response) {\r\n      console.error('Error: no webservice response');\r\n    }\r\n    else {\r\n      console.error(response);\r\n      // todo: add test in case no headers are returned due to Angular not understanding\r\n      // the returned Content-Type (e.g. text/cvs --- instead of text/csv)\r\n\r\n      let contentType = response.headers!.get('content-type') || ''; // the ! - Non-null assertion operator is needed to coerce away typescript compiler error\r\n\r\n      contentType = contentType.substring(0, (contentType + ';').indexOf(';'));\r\n\r\n      let error: string;\r\n\r\n      if ('text/html' === contentType) {\r\n        error = response.text() || '';\r\n      }\r\n      else if ('application/json' === contentType) {\r\n        error = JSON.stringify(response.json());\r\n      }\r\n      else {\r\n        // handle when the Content-Type is missing or not recognized\r\n        // for instance: Angular not understanding the returned Content-Type (e.g. text/cvs instead of text/csv)\r\n        error = 'Unrecognized error response Content-Type: \\\"' + contentType + '\\\"';\r\n      }\r\n\r\n      console.error(`${response.status} ${response.statusText || ''} ${error || ''}`);\r\n      console.dir(response);\r\n    }\r\n\r\n    return Observable.throw(response);\r\n  }\r\n\r\n  public constructor(private http: Http) {\r\n    this.ReadHeaders = new Headers();\r\n    this.ReadHeaders.append('Endpoint-Access', 'authorization/basic'); // fake header to force withCredentials:true basic authorization\r\n\r\n    this.WriteHeaders = new Headers();\r\n    this.WriteHeaders.append('Content-Type', 'application/json');\r\n  }\r\n\r\n  /**\r\n   * Gets the default Headers for read (get) webservice access\r\n   * @method readHeaders\r\n   * @return {Headers} the read Headers for the application webservices\r\n   */\r\n  public get readHeaders(): Headers {\r\n    return this.ReadHeaders;\r\n  }\r\n\r\n  /**\r\n   * Gets the default Headers for write (post, put, patch, delete) webservice access\r\n   * @method writeHeaders\r\n   * @return {Headers} the write Headers for the application webservices\r\n   */\r\n  public get writeHeaders(): Headers {\r\n    return this.WriteHeaders;\r\n  }\r\n\r\n  public getRequest(origin: string, resource: string, requestOptions?: RequestOptionsArgs): Observable<Response | any> {\r\n    if (!requestOptions) {\r\n      requestOptions = this.requestOptions;\r\n    }\r\n\r\n    requestOptions.method = RequestMethod.Get;\r\n\r\n    if (ResponseContentType.Blob === requestOptions.responseType) {\r\n      return this.http.get(origin + resource, requestOptions)\r\n        .map(WebService.blobResponseHandler)\r\n        .catch(WebService.errorResponseHandler);\r\n    }\r\n    else if (ResponseContentType.Json === requestOptions.responseType) {\r\n      return this.http.get(origin + resource, requestOptions)\r\n        .map(WebService.jsonResponseHandler)\r\n        .catch(WebService.errorResponseHandler);\r\n    }\r\n    else {\r\n      requestOptions.headers = this.readHeaders;\r\n\r\n      if (ResponseContentType.ArrayBuffer === requestOptions.responseType) {\r\n        return this.http.get(origin + resource, requestOptions)\r\n          .map(WebService.arrayBufferResponseHandler)\r\n          .catch(WebService.errorResponseHandler);\r\n      }\r\n      else if (ResponseContentType.Text === requestOptions.responseType) {\r\n        return this.http.get(origin + resource, requestOptions)\r\n          .map(WebService.httpResponseHandler)\r\n          .catch(WebService.errorResponseHandler);\r\n      }\r\n      else {\r\n        console.error('ERROR: requestOptionsArgs.responseType: \\'' + requestOptions.responseType + '\\'');\r\n        console.error('Supported types are: ResponseContentType.Blob, ' +\r\n          'ResponseContentType.Json, ResponseContentType.ArrayBuffer, or ResponseContentType.Text');\r\n      }\r\n    }\r\n    return new Observable<null>();\r\n  }\r\n\r\n  public exportGetRequest(origin: string, resource: string, header_type: string): Observable<Response | any> {\r\n    const headers: Headers = new Headers;\r\n    headers.append('Accept', header_type);\r\n\r\n    this.requestOptions.headers = headers;\r\n    this.requestOptions.method = RequestMethod.Get;\r\n    this.requestOptions.responseType = ResponseContentType.Blob;\r\n\r\n    return this.http.get(origin + resource, this.requestOptions)\r\n      .map(WebService.blobResponseHandler)\r\n      .catch(WebService.errorResponseHandler);\r\n  }\r\n\r\n  public postRequest(origin: string, resource: string, body: {}, headers: Headers = this.WriteHeaders): Observable<Response | any> {\r\n    this.requestOptions.headers = headers;\r\n\r\n    return this.http.post(origin + resource, JSON.stringify(body), this.requestOptions)\r\n      .map(WebService.jsonResponseHandler)\r\n      .catch(WebService.errorResponseHandler);\r\n  }\r\n\r\n  public postUpload(origin: string, resource: string, data: Blob, myHeaders: Headers): Observable<Response | any> {\r\n\r\n    this.requestOptions = {withCredentials: true};\r\n    this.requestOptions.headers = myHeaders;\r\n\r\n    return this.http.post(origin + resource, data, this.requestOptions);\r\n\r\n  }\r\n\r\n  public putRequest(origin: string, resource: string, body: {}, headers: Headers = this.WriteHeaders): Observable<Response | any> {\r\n    this.requestOptions.headers = headers;\r\n\r\n    return this.http.put(origin + resource, JSON.stringify(body), this.requestOptions)\r\n      .map(WebService.jsonResponseHandler)\r\n      .catch(WebService.errorResponseHandler);\r\n  }\r\n\r\n  public patchRequest(origin: string, resource: string, body: {}, headers: Headers = this.WriteHeaders): Observable<Response | any> {\r\n    this.requestOptions.headers = headers;\r\n\r\n    return this.http.patch(origin + resource, JSON.stringify(body), this.requestOptions)\r\n      .map(WebService.jsonResponseHandler)\r\n      .catch(WebService.errorResponseHandler);\r\n  }\r\n\r\n  public deleteRequest(origin: string, resource: string, headers: Headers = this.WriteHeaders): Observable<Response | any> {\r\n    this.requestOptions.headers = headers;\r\n\r\n    return this.http.delete(origin + resource, this.requestOptions)\r\n      .map(WebService.jsonResponseHandler)\r\n      .catch(WebService.errorResponseHandler);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}